#!/usr/bin/perl -w

#    ccne - Carbapenemase-encoding gene copy number estimator
#
#    Copyright (C) 2021- Jianping Jiang
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

use strict;
use warnings;
use File::Copy;
use File::Basename;
use Time::Piece;
use Time::Seconds;
use Scalar::Util qw(openhandle);
use FindBin;
use Cwd qw(abs_path);


# global variables
my $OPSYS = $^O;
my $BINDIR = "$FindBin::RealBin/../binaries/$OPSYS";
my $EXE = $FindBin::RealScript;
my $VERSION = "1.0.0";
my $AUTHOR = 'Jianping Jiang <jiangjianping@fudan.edu.cn>';
my (@Options,@LOG,$quiet,$multiref,$dbdir,$CARB_Gene, $SP, $Housekeeping_gene,$input,$output,$threads,$fl);
$dbdir = $ENV{'CCNE_DBDIR'} || abs_path("$FindBin::RealBin/../db");

&add_bundle_to_path();
# table of tools needed and min versions
my $BIDEC = '(\d+\.\d+)';  # pattern of NN.NN for versions that can be compared
my %tools = (
  'bwa' => {
    GETVER  => "bwa 2>&1| grep -E 'Version: .+\$'",
    REGEXP  => qr/($BIDEC)/,
    MINVER  => "0.7",
    NEEDED  => 1,
  },
  'samtools' => {
    GETVER  => "samtools 2>&1| grep -E 'Version: .+\$'",
    REGEXP  => qr/($BIDEC)/,
    MINVER  => "1.9",
    NEEDED  => 1,
  },
  'bedtools' => {
    GETVER  => "bedtools 2>&1| grep -E 'Version: .+\$'",
    REGEXP  => qr/($BIDEC)/,
    MINVER  => "2.29",
    NEEDED  => 1,
  }
);
# functions to check if tool is installed and correct version


sub ver2str {
  my($bidec) = @_;
  return $bidec if $bidec !~ m/\./;
  return join '', map { sprintf "%03d",$_ } (split m/\./, $bidec);
}

sub check_tool {
  my($toolname) = @_;
  my $t = $tools{$toolname};
  my $fp = &find_exe($toolname);
  &msg("Can't find required '$toolname' in your \$PATH") if !$fp and $t->{NEEDED};
  if ($fp) {
    $t->{HAVE} = $fp;
    &msg("Looking for '$toolname' - found $fp");
    if ($t->{GETVER}) {
      my($s) = qx($t->{GETVER});
      if (defined $s) {
        chomp $s;
        $s =~ $t->{REGEXP} or &err("Coult not parse version from '$s'");;
        $t->{VERSION} = &ver2str($1);
        &msg("Determined $toolname version is $t->{VERSION} from '$s'");
        if (defined $t->{MINVER} and $t->{VERSION} lt &ver2str($t->{MINVER}) ) {
          &err("CCNE needs $toolname $t->{MINVER} or higher. Please upgrade and try again.");
        }
      }
      else {
        &err("Could not determine version of $toolname - please install version",
            $t->{MINVER}, "or higher");
      }
    }
  }
}

sub check_all_tools {
  for my $toolname (sort keys %tools) {
    &check_tool($toolname);
  }
}
&msg("Check for dependent tools");
&check_all_tools();
&setOptions();
if(not defined $Housekeeping_gene)
{
	if($SP eq "Kp"){$Housekeeping_gene = 'rpoB';}
	elsif($SP eq "Ab"){$Housekeeping_gene = 'rpoB';}
	elsif($SP eq "Ec"){$Housekeeping_gene = 'polB';}
	elsif($SP eq "Pa"){$Housekeeping_gene = 'ppsA';}
	else{&err("--sp parameter error! Only Kp|Ab|Ec|Pa allowed!")}
}

my @Housekeeping_index_set = ();
if($multiref == 1)
{
	@Housekeeping_index_set = glob "$dbdir/Housekeeping/$SP".'_*.fasta';
}
else
{
	@Housekeeping_index_set = "$dbdir/Housekeeping/$SP".'_'.$Housekeeping_gene.'.fasta';
}

my $CARB_index = "$dbdir/Carb/$CARB_Gene.fasta";
#my $Housekeeping_index = "$dbdir/Housekeeping/$SP".'_'.$Housekeeping_gene.'.fasta';
if(not -e $CARB_index)
{
	&err("$CARB_Gene index file not found!");
}
for my $Housekeeping_index(@Housekeeping_index_set)
{
	if(not -e $Housekeeping_index)
	{
        	&err("$Housekeeping_index index file not found!");
	}
}
open IN,"<$input";
open OUT,">$output";
if($multiref == 1)
{
	print OUT "ID\tAverage reference reads depth\t$CARB_Gene reads depth\tratio\tEstimated $CARB_Gene copy number\n";
}
else
{
	print OUT "ID\t$Housekeeping_gene reads depth\t$CARB_Gene reads depth\tratio\tEstimated $CARB_Gene copy number\n";
}
while(my $line = <IN>)
{
	chomp $line;
	my @ele = split/\t/,$line;
	my @cmd_carb = ();
	my @cmd_hk = ();
	my $name = $ele[0];
	if($#ele == 1)
	{
		my $reads1 = $ele[1];
		if(-e $reads1)
		{
			
			push @cmd_carb, "bwa mem $CARB_index $reads1 -t $threads |samtools view -b -F 4 - | samtools sort - | bedtools genomecov -ibam - -d ";
			for my $Housekeeping_index(@Housekeeping_index_set)
			{
				push @cmd_hk, "bwa mem $Housekeeping_index $reads1 -t $threads |samtools view -b -F 4 - | samtools sort - | bedtools genomecov -ibam - -d";
			}
		}
		else
		{
			 &err("$reads1 not found!");
		}
	}
	elsif($#ele == 2)
	{
		my $reads1 = $ele[1];
		my $reads2 =  $ele[2];
		if(-e $reads1 and -e $reads2)
		{
			
			push @cmd_carb, "bwa mem $CARB_index $reads1 $reads2 -t $threads |samtools view -b -F 4 - | samtools sort - | bedtools genomecov -ibam - -d ";
			for my $Housekeeping_index(@Housekeeping_index_set)
			{
			 	push @cmd_hk,"bwa mem $Housekeeping_index $reads1 $reads2 -t $threads |samtools view -b -F 4 - | samtools sort - | bedtools genomecov -ibam - -d";
			}
		}
		else
		{
			 &err("$reads1 or $reads2 not found!");
		}
	}
	else
	{
		&err("Input file format error!");
	}
	my $carb_cn = 0;
	my $total_carb = 0;
	my $hk_cn = 0;
	my $total_hk = 0;
	for my $cmd(@cmd_carb)
	{
		&msg("Mapping to $CARB_Gene");
		my $content_carb = `$cmd`;
		$total_carb += &stat($content_carb,$fl);
	}
	$carb_cn = $total_carb/(scalar @cmd_carb);
	my $i = 0;
	for my $cmd(@cmd_hk)
	{
		&msg("Mapping to $Housekeeping_index_set[$i]");
		my $content_hk = `$cmd`;
		$total_hk += &stat($content_hk,$fl);
		$i++;
	}
	$hk_cn = $total_hk/(scalar @cmd_hk);
	my $ratio = $carb_cn/$hk_cn;
	if($ratio > 0 && $ratio < 0.5)
	{
		$ratio = 0.5;
	}
	print OUT $name,"\t",$hk_cn,"\t",$carb_cn,"\t",$ratio,"\t",int($ratio+0.5),"\n";
	&msg("All finished! Enjoy!");
}


sub stat()
{
        my $content = shift;
	my $fl = shift;
        my $sum = 0;
        my $i = 0;
        my @stat = ();
        my @tmp = split/\n/,$content;
	for my $line(@tmp)
        {
                chomp $line;
                my @ele = split/\t/,$line;
                push @stat,$ele[-1];
        }
        map{$sum+=$_;$i++;}@stat[$fl-1..$#stat-$fl];
        return $sum/$i;
}


#------------------------------------------------
sub find_exe {
  my($bin) = shift;
  for my $dir (File::Spec->path) {
    my $exe = File::Spec->catfile($dir, $bin);
    return $exe if -x $exe;
  }
  return;
}
#------------------------------------------------
sub msg {
  my $t = localtime;
  my $line = "[".$t->hms."] @_\n";
  print STDERR $line unless $quiet;
  if (openhandle(\*LOG)) {
    # write out any buffered log lines
    if (@LOG) {
      print LOG @LOG;
      @LOG=();
    }
    # write out the current log line
    print LOG $line;
  }
  else {
    # buffer this log line for later
    push @LOG, $line;
  }
}
#----------------------------------------------------------------------

sub err {
  $quiet=0;
  msg(@_);
  exit(2);
}

#----------------------------------------------------------------------
# Option setting routines

sub setOptions {
  use Getopt::Long;
  @Options = (
    'General:',
    {OPT=>"help",    VAR=>\&usage,             DESC=>"This help"},
    {OPT=>"version", VAR=>\&version, DESC=>"Print version and exit"},
    {OPT=>"quiet!",  VAR=>\$quiet, DEFAULT=>0, DESC=>"No screen output"},
    'Setup:',
    {OPT=>"dbdir=s",  VAR=>\$dbdir, DEFAULT=>$dbdir, DESC=>"CCNE database root folders"},
    {OPT=>"listdb",   VAR=>\&list_db,  DESC=>"List all configured databases"},
    {OPT=>"listsp",   VAR=>\&list_sp,  DESC=>"List all configured species and housekeeping genes"},
    'Input:',
    {OPT=>"carb=s",  VAR=>\$CARB_Gene,  DESC=>"Carbapenemase-encoding gene name, such as KPC-2, NDM-1, etc. Please refer to --listdb (required)"},
    {OPT=>"sp=s",  VAR=>\$SP,  DESC=>"Species name[Kp|Ec|Ab|Pa](required)"},
    {OPT=>"ref=s",  VAR=>\$Housekeeping_gene,  DESC=>"Reference gene defalut(Kp:rpoB Ab:rpoB Ec:polB Pa:ppsA), please refer to --listsp"},
    {OPT=>"in=s",  VAR=>\$input, DESC=>"Input file name (required)"},
    'Outputs:',
    {OPT=>"out=s",  VAR=>\$output, DESC=>"Output file name (required)"},
    'Computation:',
    {OPT=>"flank=i",  VAR=>\$fl, DEFAULT=>100, DESC=>"The flanking length of sequence to be excluded"},
    {OPT=>"cpus=i",  VAR=>\$threads, DEFAULT=>1, DESC=>"Number of CPUs to use"},
    {OPT=>"multiref!",  VAR=>\$multiref, DEFAULT=>0, DESC=>"Use the reads depth of all the available sequences"},
  );
(!@ARGV) && (usage(1));

  &GetOptions(map {$_->{OPT}, $_->{VAR}} grep { ref } @Options) || usage(1);
  #Check required values
  if(not defined $CARB_Gene){
    &err("--carb required");
  }
  if(not defined $SP){
    &err("--sp required");
  }
  if(not defined $input){
    &err("--in required");
  }
  if(not defined $output){
    &err("--out required");
  }

  # Now setup default values.
  foreach (@Options) {
    if (ref $_ && defined($_->{DEFAULT}) && !defined(${$_->{VAR}})) {
      ${$_->{VAR}} = $_->{DEFAULT};
    }
  }
}


sub usage {
  my($exitcode) = @_;
  $exitcode ||= 0;
  $exitcode = 0 if $exitcode eq 'help';  # what gets passed by getopt func ref
  select STDERR if $exitcode;            # write to STDERR if exitcode is error

  print
    "Name:\n  ", ucfirst($EXE), " $VERSION by $AUTHOR\n",
    "Synopsis:\n  Carbapenemase-encoding gene copy number estimator\n",
    "Usage:\n  $EXE --carb KPC-2 --sp Kp --in File.list --out result.txt\n";
  foreach (@Options) {
    if (ref) {
      my $def = defined($_->{DEFAULT}) ? " (default '$_->{DEFAULT}')" : "";
      $def = ($def ? ' (default OFF)' : '(default ON)') if $_->{OPT} =~ m/!$/;
      my $opt = $_->{OPT};
      $opt =~ s/!$//;
      $opt =~ s/=s$/ [X]/;
      $opt =~ s/=i$/ [N]/;
      $opt =~ s/=f$/ [n.n]/;
      printf STDERR "  --%-16s %s%s\n", $opt, $_->{DESC}, $def;
    }
    else {
      print "$_\n"; # Subheadings in the help output
    }
  }
  exit($exitcode);
}

#----------------------------------------------------------------------

sub version {
  print STDERR "$EXE $VERSION\n";
  exit;
}


#----------------------------------------------------------------------
sub list_db{
  my @files = glob "$dbdir/Carb/*.fasta";
  my @out = ();
  map{$_ =~ /\/Carb\/(.+)\.fasta/;push @out,$1;}@files;
  print "Configured carbapenemase-encoding genes:\n";
  print join("\n",@out),"\n";
  exit;
}

#----------------------------------------------------------------------
sub list_sp{
  my @files = glob "$dbdir/Housekeeping/*.fasta";
  my %out = ();
  map{$_ =~ /\/Housekeeping\/(.+)\.fasta/;my @tmp = split/\_/,$1;if(exists $out{$tmp[0]}){push @{$out{$tmp[0]}},$tmp[1];}else{@{$out{$tmp[0]}} = ($tmp[1]);}}@files;
  map{if($_ eq 'rpoB'){$_ = 'rpoB[default]'}}@{$out{'Ab'}};
  map{if($_ eq 'polB'){$_ = 'polB[default]'}}@{$out{'Ec'}};
  map{if($_ eq 'rpoB'){$_ = 'rpoB[default]'}}@{$out{'Kp'}};
  map{if($_ eq 'ppsA'){$_ = 'ppsA[default]'}}@{$out{'Pa'}};
  for my $k(keys %out)
  {
        print $k,":",join("|",@{$out{$k}}),"\n";


  }
  exit;
}


#----------------------------------------------------------------------

sub add_bundle_to_path {
  for my $dir ($BINDIR, $FindBin::RealBin) {
    if (-d $dir) {
      msg("Appending to PATH: $dir");
      $ENV{PATH} .= ":$dir";
    }
  }
}
